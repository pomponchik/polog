class FieldsContainer:
    """
    Для конкретного лога набор дополнительных извлекаемых полей задается индивидуально, в зависимости от:

    1. Локального набора полей (например, заданного в декораторе).
    2. Глобального (дефолтного) набора полей.

    При пересечении имен полей, предпочтение должно отдаваться более локальному варианту.
    При добавлении новых полей в словарь с дефолтами, они должны "добавляться" и сюда, то есть "под капотом" обход делается всегда по переданным изначально экземплярам словарей (то есть они не копируются).

    Вызывающий код не должен знать всех этих нюансов. Ему дается интерфейс итератора, работающего как словарь, но под капотом объединяющего несколько словарей.
    """
    def __init__(self, fields, defaults):
        self.fields = fields
        self.defaults = defaults

    def __iter__(self):
        """
        Аналог итератора по ключам словаря, только по ключам двух словарей сразу.

        При пересечении множеств ключей двух словарей, они не дублируются.
        """
        for key in self.fields:
            yield key

        for key in self.defaults:
            if key not in self.fields:
                yield key

    def items(self):
        """
        Аналог dict.items(), итерирующийся по 2-м словарям.

        При пересечении множеств ключей двух словарей, предпочтение отдается значению из первого словаря.
        """
        for key, value in self.fields.items():
            yield key, value

        for key, value in self.defaults.items():
            if key not in self.fields:
                yield key, value
