class ReusableChain:
    """
    Переиспользуемый аналог встроенного itertools.chain.

    Слово "переиспользуемый" означает, что по нему можно итерироваться произвольное число раз.
    Однако эта гарантия дается только при условии, что оборачиваемые итерабельные объекты тоже являются переиспользуемыми.
    К примеру, список переиспользуемым является, поскольку по нему можно итерироваться много раз. А генератор - нет, поскольку с ним это можно сделать только 1 раз.

    Итерация не является потокобезопасной. Также здесь не обеспечена полноценная защита от изменения оборачиваемых объектов во время итерации. Эта защита может быть у отдельных оборачиваемых итерабельных объектов, но она не гарантируется на уровне всей цепочки.
    """

    def __init__(self, *iterables):
        """
        iterables - итерабельные объекты, которые мы "склеиваем".
        """
        self.iterables = iterables

    def __iter__(self):
        """
        Собственно, вся нехитрая логика ReusableChain. Проходимся по всем итерабельным объектам, переданным при инициализации, и возвращаем на каждой итерации по одному объекту оттуда.
        """
        for iterable in self.iterables:
            yield from iterable

    def __repr__(self):
        """
        Строковая репрезентация.
        """
        iterables = ', '.join([str(x) for x in self.iterables])
        return f'{type(self).__name__}({iterables})'
