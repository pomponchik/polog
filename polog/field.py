from polog.core.utils.signature_matcher import SignatureMatcher


class field:
    """
    Класс, представляющий кастомное поле лога.
    Пользователь Polog может подключать неограниченное количество дополнительных полей.

    Технически работа поля состоит из 2-х вещей:
    1. Извлечь какую-то информацию из исходных данных.
    2. Преобразовать ее в строку.

    Любые обработчики Polog должны ожидать возможность наличия дополнительных полей.
    На момент попадания в обработчик содержимое поля уже сконвертировано в нужный формат.
    """
    def __init__(self, extractor, converter=None):
        """
        extractor - функция, принимающая лог в качестве аргумента, и возвращающая некий объект, представляющий контент поля.
        converter - функция, преобразующая извлеченный контент в строковый формат. Принимает на вход объект, возвращенный функцией extractor и возвращает строку.

        Конвертер отделен от экстрактора, поскольку в некоторых случаях нам не нужно тратить ресурсы на преобразование форматов. Скажем, если приоритет данного лога ниже установленного в данный момент уровня логирования.
        Обязательным для инициализации поля является только экстрактор. Если экстрактор по умолчанию возвращает строки, передавать конвертер не требуется. Также это не нужно делать, если для сериализации достаточно скормить промежуточный объект функции str() - это будет сделано автоматически.
        Конвертер требуется определять только в ситуациях, когда вам требуется какой-то специфический механизм сериализации поля.
        """
        self.extractor = self.get_extractor(extractor)
        self.converter = self.get_converter(converter)

    def get_data(self, log):
        """
        Берем сырые данные, извлекаем из них некое значение с помощью экстрактора и скармливаем его конвертеру, результат возвращаем.
        """
        item = self.extract(log)
        converted_item = self.convert(item)
        return converted_item

    def extract(self, log):
        """
        Принимаем на вход лог и возвращаем некий объект.
        Обычно - строку; если это не строка, то нужно зарегистрировать еще функцию converter для преобразования в строку. См. комментарий к методу .__init__().

        По факту данный метод является прокси и вызывает другой метод, ранее зарегистрированный в качестве экстрактора.
        """
        return self.extractor(log)

    def convert(self, value):
        """
        Принимаем на вход некий объект, возвращенный экстрактором, и возвращаем строку, в которую он был сериализован.

        Прокси-метод. По факту вызывает либо переданный пользователем конвертер, либо стандартный, если пользователь ничего не передавал.
        """
        return self.converter(value)

    def get_extractor(self, extractor):
        """
        По сути здесь не происходит никакой работы, кроме проверки, что переданный пользователем в качестве экстрактора объект является именно функцией.
        Исходя из сигнатуры метода .__init__() у пользователя нет возможности не передать никакой экстрактор, поэтому здесь не происходит выбора между каким-нибудь стандартным экстрактором и переданным пользователем.
        """
        if not callable(extractor):
            raise ValueError('Extractor must be called.')
        if not SignatureMatcher.is_handler(extractor):
            raise ValueError('The signature of the function passed as a extractor does not match the expected one. It should be the same as the standard handler.')
        return extractor

    def get_converter(self, maybe_converter):
        """
        Здесь принимается решение, каким конвертером (функцией-сериализатором) мы пользуемся.

        Если пользователь передал свой конвертер, используем его. Иначе - используем стандартный, который просто скармливает любые объекты функции str().
        """
        if maybe_converter is None:
            return self.standart_converter
        if callable(maybe_converter):
            if not SignatureMatcher.is_handler(maybe_converter):
                raise ValueError('The signature of the function passed as a converter does not match the expected one. It should be the same as the standard handler.')
            return maybe_converter
        raise ValueError('Converter must be called.')

    def standart_converter(self, value):
        """
        Тупо возвращаем то, что сюда передано.
        
        Данный метод используется, если пользователь не передал в конструктор класса кастомную функцию-сериализатор.
        """
        return value
