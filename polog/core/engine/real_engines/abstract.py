class AbstractRealEngine:
    """
    "Движок" - это некоторый объект, ответственный за вызов обработчиков при наступлении логируемого события.

    Реализаций движков может быть несколько, с акцентами на разные характеристики.
    К примеру, асинхронные движки обеспечивают бОльшую производительность ценой отсутствия гарантий правильного порядка записи логов, а также большей сложности их внутренней реализации. Также движки могут помимо базовой функциональности делать что-то еще. К примеру, можно написать мета-движок, который мог бы автоматически переключаться между разными типами движков, опираясь на накопленную статистику их производительности.

    Каждый движок вне зависимости от реализации должен поддерживать два метода:
    write() - передача информации о событии обработчикам.
    stop() - освобождение любых выделенных движком ресурсов.
    """

    def __init__(self, settings):
        self.settings = settings

    def write(self, log_item):
        """
        Запись лога.

        Ожидается, что здесь будет логика, ответственная за вызов всех обработчиков.
        """
        raise NotImplementedError # pragma: no cover

    def stop(self):
        """
        Остановка движка.

        Скажем, если движок использовал дополнительные потоки или процессы для своей работы, какие-нибудь файловые дескрипторы - все эти ресурсы должны быть освобождены при вызове данного метода.
        """
        raise NotImplementedError
